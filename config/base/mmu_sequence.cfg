########################################################################################################################
# Happy Hare MMU Software
# Supporting macros
#
# THIS FILE IS READ ONLY
#
# Copyright (C) 2022  moggieuk#6538 (discord) moggieuk@hotmail.com
# This file may be distributed under the terms of the GNU GPLv3 license.
#
# Goal: Control of parking and loading and unload sequences
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare Ready
#
#
# These skeleton macros define all the callbacks made during filament loading or unloading. They can be extended with
# the user command addtions (see 'mmu_macro_vars.cfg') or can be used as templates for completely custom macros. Note
# the SAVE/RESTORE_GCODE_STATE wrapper pattern is precautionary
#
# The ordering of these macros is as follows (if any are not defined they are skipped):
#
# Unloading sequence...
#   _MMU_PRE_UNLOAD             Called before starting the unload
#     'form_tip_macro'          User defined macro for tip forming
#   _MMU_POST_FORM_TIP          Called immediately after tip forming
#     (_MMU_UNLOAD_SEQUENCE)    Advanced: Optionally called based on 'gcode_unload_sequence'
#   _MMU_POST_UNLOAD            Called after unload completes
#
# Loading sequence...
#   _MMU_PRE_LOAD               Called before starting the load
#     (_MMU_LOAD_SEQUENCE)      Advanced: Optionally called based on 'gcode_load_sequence'
#   _MMU_POST_LOAD              Called after the load is complete
#
# If changing a tool the unload sequence will be immediately followed by the load sequence
#
# Notes:
# 1. When the MMU is enabled Happy Hare implement z-hop and retraction portion of the moves on toolchange, runout,
#    pauses and mmu errors (while in print) as well as the un-retraction and return to print postioning. The reason
#    for this is print quality, speed and safety. However the configuration is still defined in mmu_macro_vars.
# 2. Pressure advance will automatically be cleared prior and restored after tip forming
# 3. M220 & M221 overrides will be retained after a toolchange
# 4. If configured, Spoolman will be notified of toolchange
# 5. Should an error occur causing a pause, the extruder temp will be saved and restored on MMU_UNLOCK or resume
#
# When the MMU is disabled, the supplied client_macros.cfg will take over retraction and z-hop moves using the
# same configuration which is why they are recommended rather than using alternatives
#
# Leveraging the user defined macro callbacks is usually sufficent for customization, however if you really want to
# do something unusual you can enable the gcode loading/unloading sequences by setting the following in 'mmu_parameters.cfg'
#
#   'gcode_load_sequence: 1'
#   'gcode_unload_sequence: 1'
#
# This is quite advanced and you will need to understand the Happy Hare state machine before embarking on changes.
# Reading the doc is essential
#


###########################################################################
# Shared toolhead parking macro designed to position toolhead at a suitable
# parking position and optionally retract
#   Z_HOP | float - override z-hop default
#   FORCE_PARK | int - override z-hop default
#   FORCE_PARK_XY | float,float - forced parking area
#   OPERATION | string - define operation being performed
#
[gcode_macro _MMU_PARK]
description: Park toolhead safely away from print

# -------------------------- Internal Don't Touch -------------------------
variable_saved_xyz: 0, 0, 0
variable_saved_pos: False       # Saved pos valid?
variable_park_operation: ''     # If parked, what operation was responsible
variable_next_xy: 0, 0          # Next x,y pos if next_pos is True
variable_z_hop_ramp_xy: 0, 0    # x,y pos for ramping z-hop move (Happy Hare calculated)
variable_next_pos: False        # Restore to next_pos?
variable_min_lifted_z: 0	# Supports rising "z-lifted floor" for sequential printing
variable_toolchange_z: -1	# Current calculated toolchange/movement plane
variable_has_retracted: 0	# Whether we have retracted or not

gcode:
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set operation = params.OPERATION|default(printer.mmu.operation)|string|lower %}
    {% set printing = printer.mmu.is_in_print %}
    {% set park_z_hop = params.Z_HOP|default(0)|int %}
    {% set force_park = params.FORCE_PARK|default(0)|int %}
    {% set force_park_xy = params.FORCE_PARK_XY|default([50,50])|map('float') %}
    {% set enable_park_printing = (vars.enable_park_printing|default("runout,mmu_error,pause,cancel")|string|lower).split(",") %}
    {% set enable_park_standalone = (vars.enable_park_standalone|default("toolchange,load,unload,pause,cancel")|string|lower).split(",") %}
    {% set enable_park_disabled = (vars.enable_park_disabled|default("pause,cancel")|string|lower).split(",") %}
    {% set nx,ny = next_xy|map('float') %}
    {% set z_hop_x,z_hop_y = z_hop_ramp_xy|map('float') %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% if operation in ['toolchange','load','unload','runout'] %}
        {% set x, y = vars.park_xy_toolchange|default([-1,-1])|map('float') %}
        {% set park_z_hop = vars.park_z_hop_toolchange|default(0)|float|abs %}
    {% elif operation in ['mmu_error'] %}
        {% set x, y = vars.park_xy_error|default([-1,-1])|map('float') %}
        {% set park_z_hop = vars.park_z_hop_mmu_error|default(0)|float|abs %}
    {% elif operation in ['cancel'] %}
        {% set x, y = vars.park_xy_cancel|default([-1,-1])|map('float') %}
        {% set park_z_hop = vars.park_z_hop_cancel|default(0)|float|abs %}
    {% elif operation in ['pause'] %}
        {% set x, y = vars.park_xy_pause|default([-1,-1])|map('float') %}
        {% set park_z_hop = vars.park_z_hop_pause|default(0)|float|abs %}
    {% elif force_park %}
        {% set operation = 'force_park' %}
        {% set x, y = force_park_xy|default([-1,-1])|map('float') %}
        {% set park_z_hop = params.Z_HOP|default(0)|int|abs %}
    {% else %}
        {% set park_z_hop = 0 %}
    {% endif %}
    {% set min_z = vars.min_toolchange_z|default(1)|float|abs %}
    {% set park_travel_speed = vars.park_travel_speed|default(200)|float * 60 %}
    {% set lift_speed = vars.lift_speed|default(15)|float * 60 %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set origin = printer.gcode_move.homing_origin %}
    {% set max = printer.toolhead.axis_maximum %}

    # starting_z is the height from which to calculate the toolchange height
    {% set starting_z = [[saved_xyz[2] if saved_pos else pos.z]|min, min_lifted_z]|max %}
    {% set toolchange_z = [[starting_z + park_z_hop, max.z - origin.z]|min, min_z, toolchange_z]|max %}
    {% set should_park = force_park or (
        operation in (
            enable_park_disabled if not printer.mmu.enabled else
            (enable_park_printing if printing else enable_park_standalone)
        )
    ) %}

    SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=toolchange_z VALUE={toolchange_z}
    {% if not has_retracted and vars.retract_length > 0 %}
        _MMU_RETRACT
    {% endif %}
    {% if should_park %}
        MMU_LOG MSG="Parking toolhead at {x|round(1)}, {y|round(1)}, {toolchange_z|round(1)} for {operation} operation"
        {% if not 'xy' in printer.toolhead.homed_axes %}
            RESPOND MSG="Cannot park because XY not homed"
        {% else %}
            G90 # Absolute
            {% if not 'z' in printer.toolhead.homed_axes %}
                RESPOND MSG="Skipping z_hop move because Z not homed"
            {% else %}
                {% if vars.z_hop_ramp > 0 and park_z_hop > 0 and operation in ['toolchange','load','unload','runout'] %}
                    G1 X{z_hop_x} Y{z_hop_y} Z{toolchange_z} F{park_travel_speed}	# Ramping Z lift
                    G1 X{pos.x} Y{pos.y} Z{toolchange_z} F{park_travel_speed}		# Restore starting X,Y
                {% else %}
                    G1 Z{toolchange_z} F{lift_speed}					# Z lift to toolchange plane
                {% endif %}
            {% endif %}
            {% if vars.user_park_move_macro %}
                {vars.user_park_move_macro}
            {% elif x >= 0 and y >= 0 %}
                G1 X{x} Y{y} F{park_travel_speed}					# Move to park position
                SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=park_operation VALUE=\"{operation}\"
            {% endif %}
        {% endif %}
    {% endif %}


###########################################################################
# Helper macro: save current toolhead position
# This macro is idempotent recording only the first position until cleared
#
[gcode_macro _MMU_SAVE_POSITION]
description: Record to toolhead position for return later
gcode:
    {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set axis_minimum = printer.toolhead.axis_minimum %}
    {% set axis_maximum = printer.toolhead.axis_maximum %}
    {% set x = [axis_minimum.x, [axis_maximum.x, pos.x]|min]|max %}
    {% set y = [axis_minimum.y, [axis_maximum.y, pos.y]|min]|max %}

    {% if x != pos.x or y != pos.y %}
        RESPOND TYPE="error" MSG="Warning: Klipper reported out of range gcode position (x:{pos.x}, y:{pos.y})! Adjusted to (x:{x}, y:{y}) to prevent move failure"
    {% endif %}
    {% if not park_vars.saved_pos and 'xyz' in printer.toolhead.homed_axes %}
        SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=saved_xyz VALUE="{x}, {y}, {pos.z}"
        SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=saved_pos VALUE={True}
    {% endif %}


###########################################################################
# Helper macro: restore previously saved position and reset
# This is often called directly by Happy Hare
#
[gcode_macro _MMU_RESTORE_POSITION]
description: Restore saved toolhead position
gcode:
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
    {% set x,y,z = park_vars.saved_xyz|map('float') %}
    {% set nx,ny = park_vars.next_xy|map('float') %}
    {% set park_travel_speed = vars.park_travel_speed|default(200)|float * 60 %}
    {% set lift_speed = vars.lift_speed|default(15)|float * 60 %}
    {% set restore_xy_pos = vars.restore_xy_pos|default('last') %}
    {% set printing = printer.mmu.is_in_print %}

    G90							# Absolute
    {% if park_vars.saved_pos %}
        MMU_LOG MSG="Restoring toolhead position to {x|round(1)}, {y|round(1)}, {z|round(1)}"
    {% endif %}
    {% if park_vars.toolchange_z > 0 and park_vars.saved_pos and 'z' in printer.toolhead.homed_axes %}
        G1 Z{park_vars.toolchange_z} F{lift_speed}	# Ensure at toolchange height for collision avoidance before move
    {% endif %}
    {% if park_vars.next_pos and (restore_xy_pos == 'next' and printing) %}
        G1 X{nx} Y{ny} F{park_travel_speed}		# Restore X,Y to next print position
    {% elif park_vars.saved_pos and restore_xy_pos == 'last' %}
        G1 X{x} Y{y} F{park_travel_speed}		# Restore X,Y to last (starting) position
    {% endif %}
    {% if park_vars.saved_pos and 'z' in printer.toolhead.homed_axes %}
        G1 Z{z} F{lift_speed}				# Restore original Z height
    {% endif %}
    {% if park_vars.has_retracted %}
        _MMU_UNRETRACT
    {% endif %}
    _MMU_CLEAR_POSITION


###########################################################################
# Helper macro: Retract filament
#
[gcode_macro _MMU_RETRACT]
description: Helper to retract filament
gcode:
    {% set sequence_vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set length = params.LENGTH|default(sequence_vars.retract_length)|default(1.0)|float|abs %}
    {% set speed = params.SPEED|default(sequence_vars.retract_speed)|int %}

    {% if printer.extruder.can_extrude %}
        MMU_LOG MSG="Retracting {length}mm" DEBUG=1
        M83 ; Extruder relative
        G1 E{length} F{speed|abs * 60}
    {% else %}
        RESPOND TYPE=echo MSG="Extruder is not hot enough to retract"
    {% endif %}


###########################################################################
# Helper macro: Undo retract filament move
#
[gcode_macro _MMU_UNRETRACT]
description: Helper to extruder filament to undo retract
gcode:
    {% set sequence_vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set length = params.LENGTH|default(sequence_vars.retract_length)|default(1.0)|float|abs %}
    {% set speed = params.SPEED|default(sequence_vars.unretract_speed)|int %}

    {% if printer.extruder.can_extrude %}
        MMU_LOG MSG="Un-retracting {length}mm" DEBUG=1
        M83 ; Extruder relative
        G1 E{-length} F{speed|abs * 60}
    {% else %}
        RESPOND TYPE=echo MSG="Extruder is not hot enough to un-retract"
    {% endif %}


###########################################################################
# Helper macro: clear previously saved position
#
[gcode_macro _MMU_CLEAR_POSITION]
description: Clear previously recorded toolhead position
gcode:
    SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=saved_pos VALUE={False}
    SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=next_pos VALUE={False}
    SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=toolchange_z VALUE=-1
    SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=has_retracted VALUE=0
    SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=park_operation VALUE=\"\"


###########################################################################
# Helper macro: record maximum toolhead height
# Designed to be called from slicer layer changed logic
#
[gcode_macro MMU_UPDATE_HEIGHT]
description: Record maximum toolhead height for z-hop base (call on layer change for sequential printing)
gcode:
    {% set height = params.HEIGHT|default(0)|float %}
    {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
    {% set max_z = [park_vars.min_lifted_z, printer.gcode_move.gcode_position.z, height]|max %}

    MMU_LOG MSG="Setting toolchange height floor to {max_z}" DEBUG=1
    SET_GCODE_VARIABLE MACRO=_MMU_PARK VARIABLE=min_lifted_z VALUE={max_z}


###########################################################################
# Helper macro: restore previously saved position
#
[gcode_macro _MMU_AUTO_HOME]
description: Convenience auto homing primarily for testing
gcode:
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set auto_home = vars.auto_home|default(true)|lower == 'true' %}

    {% if not 'xy' in printer.toolhead.homed_axes and auto_home %}
        RESPOND MSG="Automatically homing XYZ"
        G28
    {% endif %}


###########################################################################
# This occurs prior to unloading filament on a toolchange
#
[gcode_macro _MMU_PRE_UNLOAD]
description: Optional pre unload routine for filament change
gcode:
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set park_after_form_tip = vars.park_after_form_tip|default(false)|lower == 'true' %}

    SAVE_GCODE_STATE NAME=MMU_PRE_UNLOAD_state
    _MMU_AUTO_HOME
    _MMU_SAVE_POSITION

    {% if not park_after_form_tip %}
        _MMU_PARK
    {% endif %}

    {vars.user_pre_unload_extension|default("")}

    RESTORE_GCODE_STATE NAME=MMU_PRE_UNLOAD_state


###########################################################################
# This occurs immediately after the tip forming or cutting procedure
#
[gcode_macro _MMU_POST_FORM_TIP]
description: Optional post tip forming/cutting routing
gcode:
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set park_after_form_tip = vars.park_after_form_tip|default(false)|lower == 'true' %}

    SAVE_GCODE_STATE NAME=MMU_POST_FORM_TIP_state

    {% if park_after_form_tip %}
        _MMU_PARK
    {% endif %}

    RESTORE_GCODE_STATE NAME=MMU_POST_FORM_TIP_state


###########################################################################
# This occurs immediately after unloading filament on a toolchange
#
[gcode_macro _MMU_POST_UNLOAD]
description: Optional post unload routine for filament change
gcode:
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set operation = printer.mmu.operation %}
    {% set mmu_paused = printer.mmu.is_locked %}

    SAVE_GCODE_STATE NAME=MMU_POST_UNLOAD_state

    # This is a good place to inject logic to, for example, perform tip
    # cutting when cutter is located at the MMU, thus preping the unloaded
    # filment for next use
    {vars.user_post_unload_extension|default("")}

    RESTORE_GCODE_STATE NAME=MMU_POST_UNLOAD_state


###########################################################################
# This occurs prior to starting the load sequence on a toolchange
#
[gcode_macro _MMU_PRE_LOAD]
description: Optional pre load routine for filament change
gcode:
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set park_operation = vars.park_operation %}
    {% set operation = printer.mmu.operation %}

    SAVE_GCODE_STATE NAME=MMU_PRE_LOAD_state

    # We repeat the parking logic here so that the load sequence can run
    # independently from unload sequence. Similarly with toolchange where
    # toolhead is already unloaded
    _MMU_AUTO_HOME
    _MMU_SAVE_POSITION
    {% if operation in ['toolchange', 'load'] and not park_operation %}
        _MMU_PARK
    {% endif %}

    {vars.user_pre_load_extension|default("")}

    RESTORE_GCODE_STATE NAME=MMU_PRE_LOAD_state


###########################################################################
# This occurs after loading new filament on a toolchange
#
[gcode_macro _MMU_POST_LOAD]
description: Optional post load routine for filament change
gcode:
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set timelapse = vars.timelapse|default(false)|lower == 'true' %}
    {% set mmu_paused = printer.mmu.is_locked %}

    SAVE_GCODE_STATE NAME=MMU_POST_LOAD_state

    {% if timelapse %}
        TIMELAPSE_TAKE_FRAME
    {% endif %}

    # A good place to implement custom purging logic and/or nozzle cleaning
    # prior to returning to print/wipetower
    {vars.user_post_load_extension|default("")}

    RESTORE_GCODE_STATE NAME=MMU_POST_LOAD_state


###########################################################################
# This is called when a MMU error occurs
#
[gcode_macro _MMU_ERROR]
description: Save position and park when MMU error occurs
gcode:
    {% set vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    _MMU_SAVE_POSITION
    _MMU_PARK
    {vars.user_mmu_error_extension|default("")}


###########################################################################
#    ADVANCED   ADVANCED   ADVANCED   ADVANCED   ADVANCED   ADVANCED
# User modifable loading and unloading sequences
#
# By default Happy Hare will call internal logic to handle loading and unloading
# sequences. To enable the calling of user defined sequences you must add the
# following to your mmu_parameters.cfg
#
# gcode_load_sequence: 1	# Gcode loading sequence 1=enabled, 0=internal logic (default)
# gcode_unload_sequence: 1	# Gcode unloading sequence, 1=enabled, 0=internal logic (default)
#
# This reference example load sequence mimicks the internal ones exactly. It uses the
# high level "modular" movements that are all controlled by parameters defined in
# mmu_parameters.cfg and automatically keep the internal filament position state up-to-date.
# Switching to these macros should not change behavior and can serve as a starting point for
# your customizations
#
# State Machine:
# If you experiment beyond the basic example shown here you will need to understand
# the possible states for filament position.  This is the same state that is exposed
# as the `printer.mmu.filament_pos` printer variable. This internal state must be
# kept up-to-date and will need to be set directly as you progress through your
# custom move sequence.  At this time the state machine is non-extensible.
#
#        FILAMENT_POS_UNKNOWN = -1
#  L  ^  FILAMENT_POS_UNLOADED = 0
#  O  |  FILAMENT_POS_HOMED_GATE = 1     # If gate sensor fitted
#  A  |  FILAMENT_POS_START_BOWDEN = 2
#  D  |  FILAMENT_POS_IN_BOWDEN = 3
#        FILAMENT_POS_END_BOWDEN = 4
#  |  U  FILAMENT_POS_HOMED_ENTRY = 5    # If extruder (entry) sensor fitted
#  |  N  FILAMENT_POS_HOMED_EXTRUDER = 6
#  |  L  FILAMENT_POS_PAST_EXTRUDER = 7
#  |  O  FILAMENT_POS_HOMED_TS = 8       # If toolhead sensor fitted
#  |  A  FILAMENT_POS_IN_EXTRUDER = 9    # AKA Filament is past the Toolhead Sensor
#  v  D  FILAMENT_POS_LOADED = 10        # AKA Filament is homed to the nozzle
#
# Final notes:
# 1) You need to respect the context being passed into the macro such as the
#    desired 'length' to move because this can be called for test loading
# 2) The unload macro can be called with the filament in any position (states)
#    You are required to handle any starting point. The default reference
#    serves as a good guide
#
[gcode_macro _MMU_LOAD_SEQUENCE]
description: Called when MMU is asked to load filament
gcode:
    {% set filament_pos = params.FILAMENT_POS|float %}
    {% set length = params.LENGTH|float %}
    {% set full = params.FULL|int %}
    {% set home_extruder = params.HOME_EXTRUDER|int %}
    {% set skip_extruder = params.SKIP_EXTRUDER|int %}
    {% set extruder_only = params.EXTRUDER_ONLY|int %}

    {% if extruder_only %}
        _MMU_STEP_LOAD_TOOLHEAD EXTRUDER_ONLY=1

    {% elif filament_pos >= 7 %}                        # FILAMENT_POS_PAST_EXTRUDER
        {action_raise_error("Can't load - already in extruder!")}

    {% else %}
        {% if filament_pos <= 0 %}                      # FILAMENT_POS_UNLOADED
            _MMU_STEP_LOAD_GATE
        {% endif %}

        {% if filament_pos < 4 %}                       # FILAMENT_POS_END_BOWDEN
            _MMU_STEP_LOAD_BOWDEN LENGTH={length}
        {% endif %}

        {% if filament_pos < 6 and home_extruder %}     # FILAMENT_POS_HOMED_EXTRUDER
            _MMU_STEP_HOME_EXTRUDER
        {% endif %}

        {% if not skip_extruder %}                      # FILAMENT_POS_PAST_EXTRUDER
            _MMU_STEP_LOAD_TOOLHEAD
        {% endif %}

    {% endif %}

[gcode_macro _MMU_UNLOAD_SEQUENCE]
description: Called when MMU is asked to unload filament
gcode:
    {% set filament_pos = params.FILAMENT_POS|float %}
    {% set length = params.LENGTH|float %}
    {% set extruder_only = params.EXTRUDER_ONLY|int %}
    {% set park_pos = params.PARK_POS|float %}

    {% if extruder_only %}
        {% if filament_pos >= 7 %}                      # FILAMENT_POS_PAST_EXTRUDER
            _MMU_STEP_UNLOAD_TOOLHEAD EXTRUDER_ONLY=1 PARK_POS={park_pos}
        {% else %}
            {action_raise_error("Can't unload extruder - already unloaded!")}
        {% endif %}

    {% elif filament_pos == 0 %}
        {action_raise_error("Can't unload - already unloaded!")}

    {% else %}
        {% if filament_pos >= 7 %}                      # FILAMENT_POS_PAST_EXTRUDER
            # Exit extruder, fast unload of bowden, then slow unload encoder
            _MMU_STEP_UNLOAD_TOOLHEAD PARK_POS={park_pos}
        {% endif %}

        {% if filament_pos >= 4 %}                      # FILAMENT_POS_END_BOWDEN
            # Fast unload of bowden, then slow unload encoder
            _MMU_STEP_UNLOAD_BOWDEN FULL=1
            _MMU_STEP_UNLOAD_GATE

        {% elif filament_pos >= 2 %}                    # FILAMENT_POS_START_BOWDEN
            # Have to do slow unload because we don't know exactly where in the bowden we are
            _MMU_STEP_UNLOAD_GATE FULL=1
        {% endif %}

    {% endif %}

#
# Some examples of alternative macros follow
#
# 1. This loading example leverages the built-in modules to load filament to the end
# of the bowden tube. Then homes the filament to the toolhead sensor (mmu_toolhead)
# using synchronized gear and extruder movement. The state is updated to reflect this
# new position. It then performs a synchronized stepper move of 62mm to advance the
# filament to the nozzle
#
#[gcode_macro _MMU_LOAD_SEQUENCE]
#description: Called when MMU is asked to load filament
#gcode:
#    {% set filament_pos = params.FILAMENT_POS|float %}
#    {% set length = params.LENGTH|float %}
#    {% set skip_extruder = params.SKIP_EXTRUDER|int %}
#    {% set extruder_only = params.EXTRUDER_ONLY|int %}
#
#    {% if extruder_only %}
#        _MMU_STEP_HOMING_MOVE ENDSTOP=mmu_toolhead MOVE=50 MOTOR=extruder
#        _MMU_STEP_SET_FILAMENT STATE=8		# FILAMENT_POS_HOMED_TS
#        _MMU_STEP_MOVE MOVE=62 MOTOR=extruder
#        _MMU_STEP_SET_FILAMENT STATE=10	# FILAMENT_POS_LOADED
#    {% else %}
#        _MMU_STEP_LOAD_GATE
#        _MMU_STEP_LOAD_BOWDEN LENGTH={length}
#        {% if full and not skip_extruder %}
#            _MMU_STEP_HOMING_MOVE ENDSTOP=mmu_toolhead MOVE=50 MOTOR=gear+extruder
#            _MMU_STEP_SET_FILAMENT STATE=8	# FILAMENT_POS_HOMED_TS
#            _MMU_STEP_MOVE MOVE=62 MOTOR=gear+extruder
#            _MMU_STEP_SET_FILAMENT STATE=10	# FILAMENT_POS_LOADED
#        {% endif %}
#    {% endif %}
#
#
# 2. This very streamlined loading example starts off similarly loading to the end of the
# calibrated bowden. It then simply homes to the nozzle (using TMC stallguard on the extruder
# stepper!) with synchronized extruder+gear steppers.  This requires the `mmu_ext_touch`
# endstop to be one of those defined for the extruder stepper
#
#[gcode_macro _MMU_LOAD_SEQUENCE]
#description: Called when MMU is asked to load filament
#gcode:
#    {% set length = params.LENGTH|float %}
#    {% set full = params.FULL|int %}
#    {% set skip_extruder = params.SKIP_EXTRUDER|int %}
#    {% set extruder_only = params.EXTRUDER_ONLY|int %}
#
#    {% if extruder_only %}
#        _MMU_STEP_HOMING_MOVE ENDSTOP=mmu_ext_touch MOVE=100 MOTOR=extruder
#        _MMU_STEP_SET_FILAMENT STATE=10	# FILAMENT_POS_LOADED
#    {% else %}
#        _MMU_STEP_LOAD_GATE
#        _MMU_STEP_LOAD_BOWDEN LENGTH={length}
#        {% if full and not skip_extruder %}
#            _MMU_STEP_HOMING_MOVE ENDSTOP=mmu_ext_touch MOVE=100 MOTOR=extruder+gear
#            _MMU_STEP_SET_FILAMENT STATE=10	# FILAMENT_POS_LOADED
#        {% endif %}
#    {% endif %}

