########################################################################################################################
# Happy Hare supporting macros
#  Miscellaneious setup and supporting macros
#
# THIS FILE IS READ ONLY
#

###########################################################################
# NECESSARY KLIPPER OVERRIDES
# These supplemental settings essentially disable klipper's built in
# extrusion limits and is necessary when using an MMU
#
[extruder]
max_extrude_only_distance: 200
max_extrude_cross_section: 50

# For dialog prompts in Mainsail. Requires version >= v2.9.0
[respond]

###########################################################################
# Convenience print start marco that users can call directly from their
# slicer's custom "start g-code" or call from existing start marco
#
# To call from slicer, add this to custom start g-code (as one line just
# before the call to your regular print start macro):
#
#    MMU_INITIALIZE INITIAL_TOOL={initial_tool}
#                   REFERENCED_TOOLS=!referenced_tools!
#                   FIL_COLORS=!colors!
#                   FIL_TEMPS=!temperatures!
#                   FIL_MATERIALS=!materials!
#
# Alternatively you can pass in the params to your print start macro and
# then call from that macro with:
#
#    MMU_INITIALIZE {rawparams}
# 
[gcode_macro _MMU_INITIALIZE]
description: Called when starting print to setup MMU
gcode:
    {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}
    {% set referenced_tools = (params.REFERENCED_TOOLS|default("")|string).split(",") if params.REFERENCED_TOOLS else [] %}

    {% set filament_colors = (params.FIL_COLORS|default("")|string).split(",") if params.FIL_COLORS else ['unknown'] %}
    {% set filament_temps = (params.FIL_TEMPS|default("")|string).split(",") if params.FIL_TEMPS else ['?'] %}
    {% set filament_materials = (params.FIL_MATERIALS|default("")|string).split(",") if params.FIL_MATERIALS else ['?'] %}

    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set check_gates = vars.check_gates|lower == "true" %}
    {% set load_initial_tool = vars.load_initial_tool|lower == "true" %}
    {% set flash_slicer_colors = vars.flash_slicer_colors|lower == "true" %}

    {% set ttg_map = printer.mmu.ttg_map %}
    {% set current_tool = printer.mmu.tool %}
    {% set filament_loaded = printer.mmu.filament_pos == 10 %}
    {% set use_bypass = current_tool == -2 %}
    {% set num_colors = referenced_tools|length %}
    {% set custom_msg = [] %}

    # Precaution for when printing from Octoprint (optional if printing from virtual SD card)
    {% if vars.octoprint_compat %}
        _MMU_PRINT_START
    {% endif %}

    # Establish number of colors in print and tools being used
    {% if referenced_tools == "!referenced_tools!" %}
        RESPOND MSG="Happy Hare gcode pre-processor is probably disabled"
        {% set referenced_tools = [initial_tool] %}
        {% set num_colors = -1 %}
    {% elif referenced_tools == [] %}
        RESPOND MSG="Single color print"
        {% set referenced_tools = [initial_tool] %}
        {% set num_colors = 1 %}
    {% endif %}

    # Setup custom color map based on slicer color representation
    MMU_LED RESET=1 QUIET=1						# Reset custom colors for all gates to black
    {% if filament_colors == "!colors!" or filament_colors == "" %}
        RESPOND MSG="Filament color information not available"
        {% set filament_colors = "" %}
    {% else %}
        {% for color in filament_colors %}
            {% set gate = ttg_map[loop.index0] %}			# Map to the correct gate in case of TTG map
            {% if loop.index0|string in referenced_tools %}
                MMU_LED GATE={gate} COLOR={color}			# Register the slicer filament color
            {% endif %}
        {% endfor %}
    {% endif %}

    # Setup filament temp map if passed by slicer
    {% if filament_temps == "!temperatures!" or filament_temps == "" %}
        RESPOND MSG="Filament temperature information not available"
    {% else %}
        {% for temp in filament_temps %}
            {% set gate = ttg_map[loop.index0] %}			# Map to the correct gate in case of TTG map
            {% if loop.index0|string in referenced_tools %}
                #TODO TEMP not implemented in HH yet
                #MMU_GATE_MAP GATE={gate} TEMP={temp}			# Register the slicer filament temp with gate
            {% endif %}
        {% endfor %}
    {% endif %}

    RESPOND MSG="------- Happy Hare MMU Tool Summary -------"
    {% set m = [] %}
    {% for i in range(referenced_tools|length) %}
        {% set tool = referenced_tools[i]|int %}
        RESPOND MSG='{"T" + tool|string + " (Gate:" + ttg_map[tool]|string + ", " + filament_materials[tool]|string + ", " + filament_colors[tool]|string + ", " + filament_temps[tool]|string + "\u00B0C)"}'
        {% set _ = m.append("T" + tool|string + " (Gate:" + ttg_map[tool]|string + ")") %}
    {% endfor %}
    {% set _ = custom_msg.append("Print required tools: %s" % ", ".join(m)) %}
    {% set m = "Initial Tool: T%s" % initial_tool %}
    RESPOND MSG="{m}"
    {% set _ = custom_msg.append(m) %}
    RESPOND MSG="-------------------------------------------"
    {% set instruction_msg = "Manually ensure that T" + initial_tool|string + " is loaded and all tools available before resuming print" %}
    {% set _ = custom_msg.append(instruction_msg) %}

    {% if use_bypass %}
        {% if num_colors > 1 %}
            {% set use_bypass = False %}
            SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE="{custom_msg}"
            MMU_PAUSE MSG="Bypass selected for multi-color print"
        {% elif num_colors == 1 and not filament_loaded %}
            MMU_PAUSE MSG="Load bypass before resuming print"
        {% endif %}
    {% else %}
        {% if check_gates and referenced_tools|length > 0 %}
            # Preemptively set dialog message in case of mmu error
            SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE="{custom_msg}"

            # Pre-check gates option if multi-color print. Will pause if tools missing
            RESPOND MSG="Checking all required gates have filament loaded..."
            MMU_CHECK_GATE TOOLS={referenced_tools|join(',')}		# Verify all necessary tools are loaded
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE='""'	# Clear preemptive error message

    # New macro so that re-evaluate printer variables and thus see mmu pause
    {% if not use_bypass %}
        _MMU_LOAD_INITIAL_TOOL INITIAL_TOOL={initial_tool}
    {% endif %}


###########################################################################
# Helper macros to load the initial tool. This is separated out from main
# macro to allow for pausing on previous errors (required update to
# printer.mmu.is_locked)
#
[gcode_macro _MMU_LOAD_INITIAL_TOOL]
description: Helper to load initial tool if not paused
gcode:
    {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}

    {% if not printer.mmu.is_locked %}
        RESPOND MSG="Loading initial tool..."
        M118 PAUL...MMU_CHANGE_TOOL STANDALONE=1 TOOL={initial_tool}	# Optional: load initial tool
    {% endif %}


###########################################################################
# Convenience print end marco that users can call directly from their
# slicer's custom "end g-code" or call from existing end marco
# 
# To call from slicer, add this to custom end g-code (as one line just
# after the call to your regular print end macro) or call directly from
# you print end macro:
#
#    _MMU_FINALIZE EJECT=1
#
[gcode_macro _MMU_FINALIZE]
description: Called when ending print to finalize MMU
gcode:
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set eject_tool = params.EJECT|default(vars.eject_tool)|lower == "true" %}
    {% set octoprint_compat = vars.octoprint_compat|lower == "true" %}
    {% set reset_ttg = vars.reset_ttg|lower == "true" %}
    {% set dump_stats = vars.dump_stats|lower == "true" %}

    {% if eject_tool %}
        MMU_EJECT
    {% endif %}

    {% if reset_ttg %}
        MMU_TTG_MAP RESET=1 QUIET=1
    {% endif %}

    {% if dump_stats %}
        MMU_STATS
    {% endif %}

    # Precaution for when printing from Octoprint (optional if printing from virtual SD card)
    {% if octoprint_compat %}
        _MMU_PRINT_END
    {% endif %}


###########################################################################
# Helper macros to display dialog in supporting UI's when MMU pauses
#
[gcode_macro _MMU_ERROR_DIALOG]
description: Helper to display pause dialog
variable_custom_msg: "" # List of additional custom message to display in dialog
gcode:
    {% set msg = params.MSG|default("MMU Issue detected. Print will be paused") %}
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set show_error_dialog = vars.show_error_dialog|default(False)|lower == "true" %}

    RESPOND TYPE=command MSG="action:prompt_begin Happy Hare Error Notice"
    RESPOND TYPE=command MSG='{"action:prompt_text %s" % msg}'
    RESPOND TYPE=command MSG='{"action:prompt_text Reason: %s" % printer.mmu.reason_for_pause}'
    {% if not custom_msg == "" %}
        {% for line in custom_msg %}
            RESPOND TYPE=command MSG='{"action:prompt_text %s" % line}' 
        {% endfor %}
    {% else %}
        RESPOND TYPE=command MSG="action:prompt_text After fixing, call RESUME to continue printing (MMU_UNLOCK to restore temperature)"
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button MMU_UNLOCK|_MMU_ERROR_DIALOG_UNLOCK|secondary"
    RESPOND TYPE=command MSG="action:prompt_button RESUME|_MMU_ERROR_DIALOG_RESUME|warning"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"
    {% set custom_msg = "" %}

[gcode_macro _MMU_ERROR_DIALOG_UNLOCK]
gcode:
    MMU_UNLOCK
    RESPOND TYPE=command MSG="action:prompt_end"

[gcode_macro _MMU_ERROR_DIALOG_RESUME]
gcode:
    RESUME
    RESPOND TYPE=command MSG="action:prompt_end"


###########################################################################
# Simplified subset of commands just for macro visability in
# Mainsail/Fluidd UI (until custom HH panel is complete!)
# The __ is a trick because it is not displayed by the UI but allows for
# similar names to the real commands defined by the klipper module
#
[gcode_macro MMU__EJECT]
gcode: MMU_EJECT

[gcode_macro MMU__HOME]
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    {% set force_unload = params.FORCE_UNLOAD|default(0)|int %}
    MMU_HOME TOOL={tool} FORCE_UNLOAD={force_unload}

[gcode_macro MMU__STATUS]
gcode: MMU_STATUS

[gcode_macro MMU__MOTORS_OFF]
gcode: MMU_MOTORS_OFF

[gcode_macro MMU__SERVO]
gcode:
    {% set pos = params.POS|default("up")|string %}
    MMU_SERVO POS={pos}

[gcode_macro MMU__SELECT_TOOL]
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    MMU_SELECT TOOL={tool}

[gcode_macro MMU__SELECT_BYPASS]
gcode: MMU_SELECT_BYPASS

[gcode_macro MMU__LOAD_BYPASS]
gcode: MMU_LOAD

[gcode_macro MMU__RECOVER]
gcode: MMU_RECOVER

[gcode_macro MMU__PRELOAD]
gcode:
    {% set gate = params.GATE|default(0)|int %}
    MMU_PRELOAD GATE={gate}

[gcode_macro MMU__CHECK_GATE]
gcode:
    {% set gate = params.GATE|default(-1)|int %}
    {% set tool = params.GATE|default(-1)|int %}
    {% set gates = params.GATE|default('!')|string %}
    {% set tools = params.GATE|default('!')|string %}
    MMU_CHECK_GATE GATE={gate} TOOL={tool} GATES={gates} TOOLS={tools}


###########################################################################
# Aliases (for backward compatibility) of previously well used commands...
#
[gcode_macro MMU_CHANGE_TOOL_STANDALONE]
description: Convenience macro for inclusion in print_start for initial tool load
gcode:
    MMU_CHANGE_TOOL {rawparams} STANDALONE=1

[gcode_macro MMU_CHECK_GATES]
description: Alias for updated macro name of MMU_CHECK_GATE
gcode:
    MMU_CHECK_GATE {rawparams}

[gcode_macro MMU_REMAP_TTG]
description: Alias for updated macro name of MMU_TTG_MAP
gcode:
    MMU_TTG_MAP {rawparams}

[gcode_macro MMU_FORM_TIP]
description: Alias for updated macro name of MMU_TEST_FORM_TIP
gcode:
    MMU_TEST_FORM_TIP {rawparams}

