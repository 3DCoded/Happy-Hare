###########################################################################
# Happy Hare supporting macros
#
# This set of macros can be user edited but only macro "variables" declared
# in the macro definition like this:
#
#   variable_my_var: value
#
# will be automatically upgraded between releases (a backup of previous config
# files will always be made for your reference)
#
# It is highly recommended that, if you do change the functionality, where possible
# you simply add a call to your macro to make it easy to update replace on upgrade
#
# The companion 'mmu_sequence.cfg' file contains sketetons of macros that are
# expected to be modified will be retained on upgrade
#

# Klipper only allows for a single save_variables file so if you already
# have one you will need to merge the two
[save_variables]
filename: {klipper_config_home}/mmu/mmu_vars.cfg


# NECESSARY KLIPPER OVERRIDES #############################################
# These supplemental settings essentially disable klipper's built in
# extrusion limits and is necessary when using an MMU
[extruder]
max_extrude_only_distance: 200
max_extrude_cross_section: 50


###########################################################################
# Tool change macros
# This is automatically created on installation but you can increase
# or reduce this list to match your number of tools in operation
###########################################################################
{tx_macros}


###########################################################################
# Simplified subset of commands just for macro visability in
# Mainsail/Fluidd UI (until custom HH panel is complete!)
# The __ is a trick because it is not displayed by the UI but allows for
# similar names to the real commands defined by the klipper module
###########################################################################
[gcode_macro MMU__EJECT]
gcode: MMU_EJECT

[gcode_macro MMU__HOME]
gcode:
    {% set TOOL = params.TOOL|default(0)|int %}
    {% set FORCE_UNLOAD = params.FORCE_UNLOAD|default(0)|int %}
    MMU_HOME TOOL={TOOL} FORCE_UNLOAD={FORCE_UNLOAD}

[gcode_macro MMU__STATUS]
gcode: MMU_STATUS

[gcode_macro MMU__MOTORS_OFF]
gcode: MMU_MOTORS_OFF

[gcode_macro MMU__SERVO]
gcode:
    {% set POS = params.POS|default("up")|string %}
    MMU_SERVO POS={POS}

[gcode_macro MMU__SELECT_TOOL]
gcode:
    {% set TOOL = params.TOOL|default(0)|int %}
    MMU_SELECT TOOL={TOOL}

[gcode_macro MMU__SELECT_BYPASS]
gcode: MMU_SELECT_BYPASS

[gcode_macro MMU__LOAD_BYPASS]
gcode: MMU_LOAD

[gcode_macro MMU__RECOVER]
gcode: MMU_RECOVER

[gcode_macro MMU__PRELOAD]
gcode:
    {% set GATE = params.GATE|default(0)|int %}
    MMU_PRELOAD GATE={GATE}

[gcode_macro MMU__CHECK_GATE]
gcode:
    {% set GATE = params.GATE|default(-1)|int %}
    {% set TOOL = params.GATE|default(-1)|int %}
    {% set GATES = params.GATE|default('!')|string %}
    {% set TOOLS = params.GATE|default('!')|string %}
    MMU_CHECK_GATE GATE={GATE} TOOL={TOOL} GATES={GATES} TOOLS={TOOLS}

#
# Aliases (for backward compatibility) of previously well used commands...
#
[gcode_macro MMU_CHANGE_TOOL_STANDALONE]
description: Convenience macro for inclusion in print_start for initial tool load
gcode:
    MMU_CHANGE_TOOL {rawparams} STANDALONE=1

[gcode_macro MMU_CHECK_GATES]
description: Alias for updated macro name of MMU_CHECK_GATE
gcode:
    MMU_CHECK_GATE {rawparams}


###########################################################################
# Standalone Tip Forming
#
# This macro is, but default, called by Happy Hare to form filament tip
# prior to unloading. This will need to be tuned for your particular
# setup.  Although the slicer can also perform similarly you must also
# tune tips here.  Therefore you will likely find it easier to turn off
# slicer tip forming and to use this routine in all circumstances.
# That is the behavior configured by default and is controlled by the
#   'force_form_tip_standalone: 1' in 'mmu_parameters.cfg'
###########################################################################
[gcode_macro _MMU_FORM_TIP_STANDALONE]
description: Standalone macro that mimics SuperSlicer process

# Unloading and Ramming values - Initial moves to form and shape tip
variable_unloading_speed_start: 80     # Fast here to separate the filament from meltzone (Very intitial retract SS uses distance of E-15)
variable_unloading_speed: 18           # Too fast forms excessively long tip or hair. Slow is better here UNLOADING_SPEED_START/COOLING_MOVES seems a good start
variable_ramming_volume: 0             # (mm^3) SS default values = 2, 5, 9, 13, 18, 23, 27. Only Used to Simulate SS Ramming during standalone
variable_ss_ramming: 0                 # Set to 0 for standalone ramming (RAMMING_VOLUME), 1 to let the slicer do it (i.e. turn off for standalone)

# Cooling Move Values - To cool the tip formed and separate from strings
variable_cooling_tube_position: 35     # Dragon ST: 35, Dragon HF: 30, Mosquito: 30, Revo: 35, Phaetus Rapido HF: 43; Measured from nozzle to top of heater block
variable_cooling_tube_length: 10       # Dragon ST: 15, Dragon HF: 10, Mosquito: 20, Revo: 10, Phaetus Rapido HF: 22; Top of Heater block to top of heatsink
variable_initial_cooling_speed: 10     # Slow to solidify tip and cool string if formed.
variable_final_cooling_speed: 50       # High speed break the string formed. Too fast = tip deformation during eject. Too Slow = long string/no seperation
variable_toolchange_temp: 0            # Used if you want to lower temp during toolchanges default 0
variable_cooling_moves: 4              # 2-4 is a good start

# SkinnyDip values - To burn off VERY FINE hairs only (This is NOT for long tip reshaping)
variable_use_skinnydip: 1              # Tune this LAST, this is for removal of VERY FINE hairs only (Different than a long tip)
variable_skinnydip_distance: 30        # Start just under Cooling_tube_position and increase - Will depend on how much Ramming Volume is used
variable_dip_insertion_speed: 30       # Medium-Slow - Just long enough to melt the fine hairs. Too slow will pull up molten filament
variable_dip_extraction_speed: 70      # Around 2x Insertion speed, Prevents forming new hairs
variable_melt_zone_pause: 0            # Milliseconds - default 0
variable_cooling_zone_pause: 0         # Milliseconds - default 0 - If you need to adjust here its possible Dip Insertion too slow
variable_use_fast_skinnydip: 0         # Skip the toolhead temp change during skinnydip move - default 0


# Final Eject - for standalone tuning only. Automatically set by `MMU_FORM_TIP` command
variable_final_eject: 0                # Default 0, enable only when tuning process to eject the filament. Don't leave enabled!

# Park filament ready to eject
variable_parking_distance: 0           # Final filament parking position after final cooling move, 0 will leave filament where it naturally ends up

# Extruder speed for non specific movement
variable_extruder_eject_speed: 25      # Used for parking_distance and final_eject

gcode:
    # Initialize Paramaters
    {% set UNLOADING_SPEED_START = params.UNLOADING_SPEED_START|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['unloading_speed_start']) %}
    {% set UNLOADING_SPEED = params.UNLOADING_SPEED|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['unloading_speed']) %}
    {% set RAMMING_VOLUME = params.RAMMING_VOLUME|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['ramming_volume']) %}
    {% set SS_RAMMING = params.SS_RAMMING|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['ss_ramming']) %}
    {% set COOLING_TUBE_LENGTH = params.COOLING_TUBE_LENGTH|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['cooling_tube_length']) %}
    {% set COOLING_TUBE_POSITION = params.COOLING_TUBE_POSITION|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['cooling_tube_position']) %}
    {% set INITIAL_COOLING_SPEED = params.INITIAL_COOLING_SPEED|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['initial_cooling_speed']) %}
    {% set FINAL_COOLING_SPEED = params.FINAL_COOLING_SPEED|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['final_cooling_speed']) %}
    {% set COOLING_MOVES = params.COOLING_MOVES|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['cooling_moves']) %}
    {% set TOOLCHANGE_TEMP = params.TOOLCHANGE_TEMP|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['toolchange_temp']) %}
    {% set USE_SKINNYDIP = params.USE_SKINNYDIP|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['use_skinnydip']) %}
    {% set USE_FAST_SKINNYDIP = params.USE_FAST_SKINNYDIP|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['use_fast_skinnydip']) %}
    {% set SKINNYDIP_DISTANCE = params.SKINNYDIP_DISTANCE|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['skinnydip_distance']) %}
    {% set DIP_INSERTION_SPEED = params.DIP_INSERTION_SPEED|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['dip_insertion_speed']) %}
    {% set DIP_EXTRACTION_SPEED = params.DIP_EXTRACTION_SPEED|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['dip_extraction_speed']) %}
    {% set MELT_ZONE_PAUSE = params.MELT_ZONE_PAUSE|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['melt_zone_pause']) %}
    {% set COOLING_ZONE_PAUSE = params.COOLING_ZONE_PAUSE|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['cooling_zone_pause']) %}
    {% set EXTRUDER_EJECT_SPEED = params.EXTRUDER_EJECT_SPEED|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['extruder_eject_speed']) %}
    {% set PARKING_DISTANCE = params.PARKING_DISTANCE|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['parking_distance']) %}
    {% set FINAL_EJECT = params.FINAL_EJECT|default(printer['gcode_macro _MMU_FORM_TIP_STANDALONE']['final_eject']) %}

    G91
    M83
    G92 E0
    
    #---------------------------------#
    #-Tip forming Process begins here-#
    #---------------------------------#

    SET_PRESSURE_ADVANCE ADVANCE=0 # Temporarily disable pressure advance. Happy Hare will restore it
    {% set OLD_TEMP = printer.extruder.target %}
    {% if SS_RAMMING|int == 0 and RAMMING_VOLUME|int > 0 %} # Standalone Ramming
        {% set RATIO = (RAMMING_VOLUME|float) /23.0 %}
        G1 E{0.5784 * RATIO|float} F299 #7
        G1 E{0.5834 * RATIO|float} F302 #3
        G1 E{0.5918 * RATIO|float} F306 #6
        G1 E{0.6169 * RATIO|float} F319 #6
        G1 E{0.3393 * RATIO|float} F350 #0
        G1 E{0.3363 * RATIO|float} F350 #0
        G1 E{0.7577 * RATIO|float} F392 #6
        G1 E{0.8382 * RATIO|float} F434 #3
        G1 E{0.7776 * RATIO|float} F469 #9
        G1 E{0.1293 * RATIO|float} F469 #9
        G1 E{0.9673 * RATIO|float} F501 #2
        G1 E{1.0176 * RATIO|float} F527 #2
        G1 E{0.5956 * RATIO|float} F544 #6
        G1 E{0.4555 * RATIO|float} F544 #6
        G1 E{1.0662 * RATIO|float} F552 #4
    {% endif %}

    # Set toolchange temperature just prior to filament being extracted from melt zone and wait for set point
    # (SKINNYDIP -- normal mode only)
    # Only used if changing between filament types eg. ABS-->PLA
    {% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 0 %}
         M109 S{TOOLCHANGE_TEMP}
    {% endif %}

    # Unloading - This is where the tip spear shape comes from Faster=longer/pointer/higher stringing
    {% set TOTAL_RETRACTION_DISTANCE = COOLING_TUBE_POSITION|float + COOLING_TUBE_LENGTH|float / 2 - 15 %}
    G1 E-15 F{1.0 * UNLOADING_SPEED_START|float * 60} # Default value from SS - Cannot modify
    G1 E-{0.7 * TOTAL_RETRACTION_DISTANCE} F{1.0 * UNLOADING_SPEED|float * 60}
    G1 E-{0.2 * TOTAL_RETRACTION_DISTANCE} F{0.5 * UNLOADING_SPEED|float * 60}
    G1 E-{0.1 * TOTAL_RETRACTION_DISTANCE} F{0.3 * UNLOADING_SPEED|float * 60}

    {% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 1 %}
        M104 S{TOOLCHANGE_TEMP}
    {% endif %}

    # Generate Cooling Moves - Solidifies tip shape and helps break strings if formed
    {% set SPEED_INC = (FINAL_COOLING_SPEED|float - INITIAL_COOLING_SPEED|float) / (2 * COOLING_MOVES|float - 1) %}
    {% for move in range(COOLING_MOVES|int) %}
        G1 E{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*move*2) * 60}
        G1 E-{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*(move*2+1)) * 60}
    {% endfor %}

    # Wait for extruder to reach toolchange temperature after cooling moves complete (SKINNYDIP--fast mode only)
    {% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 1 %}
        M109 S{TOOLCHANGE_TEMP}
    {% endif %}

    # Skinny dip Move - burns off VERY FINE hairs (Good for PLA)
    {% if USE_SKINNYDIP|int == 1 %}
        G1 E{SKINNYDIP_DISTANCE} F{DIP_INSERTION_SPEED|float * 60}
        G4 P{MELT_ZONE_PAUSE}
        G1 E-{SKINNYDIP_DISTANCE} F{DIP_EXTRACTION_SPEED|float * 60}
        G4 P{COOLING_ZONE_PAUSE}
    {% endif %}

    {% if TOOLCHANGE_TEMP|float > 0 %}
        M104 S{OLD_TEMP}
    {% endif %}
    
    # Eject once all shaping is done - Testing only
    {% if FINAL_EJECT|int == 1 %}
        G92 E0
        G1 E-80 F{EXTRUDER_EJECT_SPEED|float * 60}
    # Park filament at fixed location
    {% elif PARKING_DISTANCE|int > 0 %}
        G90
        M82
        G1 E-{PARKING_DISTANCE} F{EXTRUDER_EJECT_SPEED|float * 60}
    {% endif %}

    G92 E0
    G90
    M82


###########################################################################
# Standalone Tip Cutting
#
# This is an example macro that can be written to replace tip forming if
# you have a filament cutting option at the toolhead.
#
# If you use Filametrix then a custom macro is available in `mmu/base/mmu_filametrix.cfg`
# This can be configured as an alternative to _MMU_FORM_TIP_STANDALONE by setting
#   'form_tip_macro: _MMU_CUT_TIP' in mmu_parameters.cfg
#
# Note: The park position of the filament is relative to the nozzle and
# represents where the end of the filament is after cutting. The park position
# is important and used by Happy Hare both to finish unloading the extruder
# as well as to calculate how far to advance the filament on the subsequent load.
# It is important to report back the position your cutter leaves the filament
# in the extruder via the variable 'output_park_pos'.
#
# The value can be set dynamically in gcode with this construct:
#   SET_GCODE_VARIABLE MACRO=_MMU_CUT_TIP VARIABLE=output_park_pos VALUE=35
# or preset as a variable on the macro like this:
#   'variable_output_park_pos: 35'
#
# See the ERF Filametrix example for more details
#
###########################################################################


###########################################################################
# Called when when the MMU action status changes
#
# The `ACTION` parameter will contain the current action string
# (also available in `printer.mmu.action` printer variable).
# Also the previous action is available in `OLD_ACTION`.
#
# See Happy Hare README for full list of action strings, but a quick ref is:
#
#  Idle|Loading|Unloading|Loading Ext|Exiting Ext|Forming Tip|Heating|Checking|Homing|Selecting
#
# The reference logic here drives a set of optional LED's
#
[gcode_macro _MMU_ACTION_CHANGED]
description: Called when an action has changed
gcode:
    {% set ACTION = params.ACTION|string %}
    {% set OLD_ACTION = params.OLD_ACTION|string %}
    {% set gate = printer['mmu']['gate'] %}

    {% if ACTION == "Loading" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_white_slow_exit STATUS_EFFECT=mmu_white_slow_status
    {% elif ACTION == "Unloading" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_white_slow_exit STATUS_EFFECT=mmu_white_slow_status
    {% elif ACTION == "Heating" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_breathing_red_exit STATUS_EFFECT=mmu_breathing_red_status
    {% elif ACTION == "Idle" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=default
    {% elif ACTION == "Homing" or ACTION == "Selecting" %}
        {% if OLD_ACTION != "Homing" and OLD_ACTION != "Checking" %}
            _MMU_SET_LED EXIT_EFFECT=mmu_white_fast_exit STATUS_EFFECT=off FADETIME=0
        {% endif %}
    {% elif ACTION == "Checking" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=mmu_white_fast_status
    {% endif %}


###########################################################################
# Called when the MMU print state changes
#
# The `STATE` parameter will contain the current state string
# (also available in `printer.mmu.print_state` printer variable)
# Also the previous action is available in `OLD_STATE`.
#
# See Happy Hare README for full list of state strings and the state transition
# diagram, but a quick ref is:
#
#  initialized|ready|started|printing|complete|cancelled|error|pause_locked|paused|standby
#
# The reference logic here drives a set of optional LED's
#
[gcode_macro _MMU_PRINT_STATE_CHANGED]
description: Called when print state changes
gcode:
    {% set STATE = params.STATE|string %}
    {% set OLD_STATE = params.OLD_STATE|string %}
    {% set gate = printer['mmu']['gate'] %}

    {% if STATE == "initialized" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_curtain_exit DURATION=3
    {% elif STATE == "printing" %}
        _MMU_SET_LED EXIT_EFFECT=default
    {% elif STATE == "pause_locked" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_strobe_exit
    {% elif STATE == "paused" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=mmu_strobe_status
    {% elif STATE == "ready" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=default
    {% elif STATE == "complete" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_sparkle_exit STATUS_EFFECT=default DURATION=20
    {% elif STATE == "error" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=default DURATION=20
    {% elif STATE == "cancelled" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=default
    {% elif STATE == "standby" %}
        _MMU_SET_LED EXIT_EFFECT=off STATUS_EFFECT=off
    {% endif %}


###########################################################################
# Called when the MMU gate_map (containing information about the filament
# type, color, availability and spoolId) is updated
#
# The `GATE` parameter will contain the gate that is updated or -1 if all updated
#
# The reference logic here drives a set of optional LED's
#
[gcode_macro _MMU_GATE_MAP_CHANGED]
description: Called when gate map is updated
gcode:
    {% set GATE = params.GATE|int %}
    {% set exit_effect = "" %}
    {% set entry_effect = "" %}
    {% set status_effect = "" %}

    {% set current_exit_effect = printer['gcode_macro _MMU_SET_LED']['current_exit_effect'] %}
    {% if current_exit_effect == "gate_status" or current_exit_effect == "filament_color" %}
        {% set exit_effect=current_exit_effect %}
    {% endif %}
    {% set current_entry_effect = printer['gcode_macro _MMU_SET_LED']['current_entry_effect'] %}
    {% if current_entry_effect == "gate_status" or current_entry_effect == "filament_color" %}
        {% set entry_effect=current_entry_effect %}
    {% endif %}
    {% set current_status_effect = printer['gcode_macro _MMU_SET_LED']['current_status_effect'] %}
    {% if current_status_effect == "filament_color" %}
        {% set status_effect=current_status_effect %}
    {% endif %}

    {% if exit_effect != "" or entry_effect != "" or status_effect != "" %}
        _MMU_SET_LED EXIT_EFFECT={exit_effect} ENTRY_EFFECT={entry_effect} STATUS_EFFECT={status_effect}
    {% endif %}


###########################################################################
# Support macro for MMU neopixel leds
#
[gcode_macro _MMU_SET_LED]
description: Called when print state changes

# Default effects for gate LEDs (exit and entry).
# This can be any effect namd or "r,g,b" color, or built-in functional effects:
#   "off"             - LED's off when on action occuring
#   "gate_status"     - indicate gate availability
#   "filament_color"  - indicate filament color
variable_default_exit_effect: "gate_status"
variable_default_entry_effect: "filament_color"

# Default effect for status LED, perhaps lighting the PTFE tube.
# This can be any effect or "r,g,b" color, or built-in functional effects:
#   "off"             - LED's off except when on action occuring
#   "on"              - LED's white (could be any effect or "r,g,b" color)
#   "filament_color"  - indicate current filament color or white if not set
variable_default_status_effect: "filament_color"

# ---------------------------- Internal -----------------------------------
# These variables can be set for visibility but they are automatically set
# by Happy Hare based on LED h/w setup at bootup. Use `MMU_LED` to modify
# behavior at runtime
variable_led_enable: 1
variable_led_strip: "neopixel:mmu_leds"
variable_exit_first_led_index: -1
variable_exit_reverse_order: 0
variable_entry_first_led_index: -1
variable_entry_reverse_order: 0
variable_status_led_index: -1

variable_current_exit_effect: "none"    # Internal state, don't mess
variable_current_entry_effect: "none"   # Internal state, don't mess
variable_current_status_effect: "none"  # Internal state, don't mess

gcode:
    {% if printer['gcode_macro _MMU_SET_LED']['led_enable'] > 0 %}
        {% set leds = printer['gcode_macro _MMU_SET_LED']['led_strip'] %}
        {% set leds_name = leds.split(':')[1] %}
        {% set EXIT_EFFECT = params.EXIT_EFFECT|default("")|string %}
        {% set ENTRY_EFFECT = params.ENTRY_EFFECT|default("")|string %}
        {% set STATUS_EFFECT = params.STATUS_EFFECT|default("")|string %}
        {% set GATE = params.GATE|default(-1)|int %}
        {% set DURATION = params.DURATION|default(-1)|int %}
        {% set FADETIME = params.FADETIME|default(1)|int %}

        # Grab useful printer variables
        {% set gate_status = printer['mmu']['gate_status'] %}
        {% set gate_color = printer['mmu']['gate_color'] %}
        {% set gate_color_rgb = printer['mmu']['gate_color_rgb'] %}
        {% set filament_pos = printer['mmu']['filament_pos'] %}
        {% set white_light = (1,1,1) %}
        {% set black_light = (0.01,0,0.02) %}
        {% set empty_light = (0,0,0) %}

        # Determine LED indexes. Gates always first followed by "exit" LED
        {% set exit_first_led_index = printer['gcode_macro _MMU_SET_LED']['exit_first_led_index'] %}
        {% set entry_first_led_index = printer['gcode_macro _MMU_SET_LED']['entry_first_led_index'] %}
        {% set status_index = printer['gcode_macro _MMU_SET_LED']['status_led_index'] %}

        {% if DURATION > 0 %}
            UPDATE_DELAYED_GCODE ID=_MMU_RESET_LED DURATION={DURATION}
        {% else %}
            UPDATE_DELAYED_GCODE ID=_MMU_RESET_LED DURATION=0
        {% endif %}

        {% if EXIT_EFFECT == "default" %}
            {% set EXIT_EFFECT = printer['gcode_macro _MMU_SET_LED']['default_exit_effect'] %}
        {% endif %}
        {% if ENTRY_EFFECT == "default" %}
            {% set ENTRY_EFFECT = printer['gcode_macro _MMU_SET_LED']['default_entry_effect'] %}
        {% endif %}
        {% if STATUS_EFFECT == "default" %}
            {% set STATUS_EFFECT = printer['gcode_macro _MMU_SET_LED']['default_status_effect'] %}
        {% endif %}

        SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_exit_effect VALUE='"{EXIT_EFFECT}"'
        SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_entry_effect VALUE='"{ENTRY_EFFECT}"'
        SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_status_effect VALUE='"{STATUS_EFFECT}"'

        # This simply has the effect of disabling non configured segments
        {% if exit_first_led_index < 1 %}
            {% set EXIT_EFFECT = "" %}
        {% endif %}
        {% if entry_first_led_index < 1 %}
            {% set ENTRY_EFFECT = "" %}
        {% endif %}
        {% if status_led_index < 1 %}
            {% set STATUS_EFFECT = "" %}
        {% endif %}

        # Exit effects...
        {% set segment = "exit" %}
        {% set first = exit_first_led_index %}
        {% if printer['gcode_macro _MMU_SET_LED']['exit_reverse_order'] == 1 %}
            {% set index = gate_status|length - GATE + first %}
            {% set count = -1 %}
            {% set last = first - gate_status|length + 1 %}
        {% else %}
            {% set index = GATE + first %}
            {% set count = 1 %}
            {% set last = first + gate_status|length - 1 %}
        {% endif %}
        {% if EXIT_EFFECT == "off" %}
            {% if GATE >= 0 %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})" FADETIME={FADETIME}
                SET_LED LED={leds_name} INDEX={index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})" FADETIME={FADETIME}
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif EXIT_EFFECT == "gate_status" %} # Filament availability
            {% if GATE >= 0 %}
                {% if gate_status[GATE] == -1 %}
                    SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{index} FADETIME={FADETIME} REPLACE=1
                {% elif gate_status[GATE] > 0 %}
                    SET_LED_EFFECT EFFECT=mmu_green_{segment}_{index} FADETIME={FADETIME} REPLACE=1
                {% else %}
                    STOP_LED_EFFECTS LEDS="{leds} ({index})" FADETIME={FADETIME}
                {% endif %}
            {% else %}
                {% set ns = namespace(index = first) %}
                {% for status in gate_status %}
                    {% if status == -1 %}
                        SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{ns.index} FADETIME={FADETIME} REPLACE=1
                    {% elif status > 0 %}
                        SET_LED_EFFECT EFFECT=mmu_green_{segment}_{ns.index} FADETIME={FADETIME} REPLACE=1
                    {% else %}
                        STOP_LED_EFFECTS LEDS="{leds} ({ns.index})" FADETIME={FADETIME}
                        SET_LED LED={leds_name} INDEX={ns.index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                    {% endif %}
                    {% set ns.index = ns.index + count %}
                {% endfor %}
            {% endif %}

        {% elif EXIT_EFFECT == "filament_color" %} # Filament color
            {% if GATE >= 0 %}
                {% set rgb = gate_color_rgb[GATE] %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% set ns = namespace(index = first, gate = 0) %}
                {% for rgb in gate_color_rgb %}
                    {% if gate_status[ns.gate] != 0 %}
                        {% if gate_color[ns.gate] == "" %}
                            {% set rgb = white_light %}
                        {% elif rgb == (0,0,0) %}
                            {% set rgb = black_light %}
                        {% endif %}
                    {% else %}
                        {% set rgb = empty_light %}
                    {% endif %}
                    SET_LED LED={leds_name} INDEX={ns.index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                    {% set ns.index = ns.index + count %}
                    {% set ns.gate = ns.gate + 1 %}
                {% endfor %}
            {% endif %}

        {% elif "," in EXIT_EFFECT %} # Not effect, just simple RGB color
            {% set rgb = EXIT_EFFECT.split(",") %}
            {% if GATE >= 0 %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif EXIT_EFFECT != "" %} # Simple effect by name
            {% if GATE >= 0 %}
                SET_LED_EFFECT EFFECT={EXIT_EFFECT}_{index} FADETIME={FADETIME} REPLACE=1
            {% else %}
                SET_LED_EFFECT EFFECT={EXIT_EFFECT} FADETIME={FADETIME} REPLACE=1
            {% endif %}
        {% endif %}

        # Entry effects...
        {% set segment = "entry" %}
        {% set first = entry_first_led_index %}
        {% if printer['gcode_macro _MMU_SET_LED']['entry_reverse_order'] == 1 %}
            {% set index = gate_status|length - GATE + first %}
            {% set count = -1 %}
            {% set last = first - gate_status|length + 1 %}
        {% else %}
            {% set index = GATE + first %}
            {% set count = 1 %}
            {% set last = first + gate_status|length - 1 %}
        {% endif %}
        {% if ENTRY_EFFECT == "off" %}
            {% if GATE >= 0 %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})" FADETIME={FADETIME}
                SET_LED LED={leds_name} INDEX={index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})" FADETIME={FADETIME}
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif ENTRY_EFFECT == "gate_status" %} # Filament availability
            {% if GATE >= 0 %}
                {% if gate_status[GATE] == -1 %}
                    SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{index} FADETIME={FADETIME} REPLACE=1
                {% elif gate_status[GATE] > 0 %}
                    SET_LED_EFFECT EFFECT=mmu_green_{segment}_{index} FADETIME={FADETIME} REPLACE=1
                {% else %}
                    STOP_LED_EFFECTS LEDS="{leds} ({index})" FADETIME={FADETIME}
                {% endif %}
            {% else %}
                {% set ns = namespace(index = first) %}
                {% for status in gate_status %}
                    {% if status == -1 %}
                        SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{ns.index} FADETIME={FADETIME} REPLACE=1
                    {% elif status > 0 %}
                        SET_LED_EFFECT EFFECT=mmu_green_{segment}_{ns.index} FADETIME={FADETIME} REPLACE=1
                    {% else %}
                        STOP_LED_EFFECTS LEDS="{leds} ({ns.index})" FADETIME={FADETIME}
                        SET_LED LED={leds_name} INDEX={ns.index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                    {% endif %}
                    {% set ns.index = ns.index + count %}
                {% endfor %}
            {% endif %}

        {% elif ENTRY_EFFECT == "filament_color" %} # Filament color
            {% if GATE >= 0 %}
                {% set rgb = gate_color_rgb[GATE] %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% set ns = namespace(index = first, gate = 0) %}
                {% for rgb in gate_color_rgb %}
                    {% if gate_status[ns.gate] != 0 %}
                        {% if gate_color[ns.gate] == "" %}
                            {% set rgb = white_light %}
                        {% elif rgb == (0,0,0) %}
                            {% set rgb = black_light %}
                        {% endif %}
                    {% else %}
                        {% set rgb = empty_light %}
                    {% endif %}
                    SET_LED LED={leds_name} INDEX={ns.index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                    {% set ns.index = ns.index + count %}
                    {% set ns.gate = ns.gate + 1 %}
                {% endfor %}
            {% endif %}

        {% elif "," in ENTRY_EFFECT %} # Not effect, just simple RGB color
            {% set rgb = ENTRY_EFFECT.split(",") %}
            {% if GATE >= 0 %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif ENTRY_EFFECT != "" %} # Simple effect by name
            {% if GATE >= 0 %}
                SET_LED_EFFECT EFFECT={ENTRY_EFFECT}_{index} FADETIME={FADETIME} REPLACE=1
            {% else %}
                SET_LED_EFFECT EFFECT={ENTRY_EFFECT} FADETIME={FADETIME} REPLACE=1
            {% endif %}
        {% endif %}

        # Status effects...
        {% if STATUS_EFFECT == "off" %}
            STOP_LED_EFFECTS LEDS="{leds} ({status_index})" FADETIME={FADETIME}
            SET_LED LED={leds_name} INDEX={status_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1

        {% elif STATUS_EFFECT == "filament_color" or STATUS_EFFECT == "on" %} # Filament color
            {% set gate = printer['mmu']['gate'] %}
            STOP_LED_EFFECTS LEDS="{leds} ({status_index})"
            {% if gate >= 0 and filament_pos > 0 %}
                {% if STATUS_EFFECT != "on" and gate_color[gate] != "" %}
                    {% set rgb = gate_color_rgb[gate] %}
                {% else %}
                    {% set rgb = white_light %}
                {% endif %}
                SET_LED LED={leds_name} INDEX={status_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                SET_LED LED={leds_name} INDEX={status_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% endif %}

        {% elif "," in STATUS_EFFECT %} # No effect, just simple RGB color
            {% set rgb = STATUS_EFFECT.split(",") %}
            STOP_LED_EFFECTS LEDS="{leds} ({status_index})"
            SET_LED LED={leds_name} INDEX={status_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1

        {% elif STATUS_EFFECT != "" %} # Simple effect by name
            SET_LED_EFFECT EFFECT={STATUS_EFFECT} FADETIME={FADETIME} REPLACE=1
        {% endif %}
    {% endif %}


###########################################################################
# Helper for LED control
#
[delayed_gcode _MMU_RESET_LED]
gcode:
    _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default


###########################################################################
# Define LED effects used in control macros above
#   (requires setup in mmu_hardware.cfg else this will have no effect and can
#    be left as-is so it is ready when you want to add LEDs)
#
# [mmu_led_effect] is a simple wrapper that makes it easy to define based on you MMU setup
#
# E.g. If you have setup the following config in mmu_hardware.cfg for 4-gate MMU
#   [mmu_leds]
#   exit_range:   1-4
#   status_index: 5
#
# E.g. You define "mmu_flash" list this
#   [mmu_led_effect mmu_flash]
#
# This will create effects on each of these segments elements without laborous
# error prone repetition:
#   "mmu_flash_exit" on 'exit' portion of the strip (leds 1,2,3)
#   "mmu_flash_status" on status LED (led 5)
#   "mmu_flash_exit_1" on for gate 0 (led 1)
#   "mmu_flash_exit_2" on for gate 1 (led 2)
#   "mmu_flash_exit_3" on for gate 2 (led 3)
#   "mmu_flash_exit_4" on for gate 3 (led 4)
#
# Then you can set effects with commands like:
#  SET_LED_EFFECT EFFECT=mmu_flash_exit     # apply effect to all exit leds
#  SET_LED_EFFECT EFFECT=mmu_flash_exit_2   # apply effect entry led for gate #1
#
# or set simple RBGW color with commands like:
#  SET_LED LED=mmu_led INDEX=2 RED=50 GREEN=50 BLUE=50 WHITE=0 TRANSMIT=1
#
# Note that gates start at 0, but led indices and effect naming starts from 1,
# so remember index = gate + 1
#
[mmu_led_effect mmu_breathing_red]
layers:       breathing 4 0 top (1,0,0)

[mmu_led_effect mmu_white_slow]
layers:       breathing 1.0 0 top (1,1,1)

[mmu_led_effect mmu_white_fast]
layers:       breathing 0.6 0 top (0.3,0.3,0.3)

[mmu_led_effect mmu_strobe]
layers:       strobe    1 1.5 add (1,1,1)
              breathing 2 0   difference (0.95,0,0)
              static    0 0   top (1,0,0)

[mmu_led_effect mmu_green]
frame_rate:   12
layers:       static 0 0 top (0,0.5,0)

[mmu_led_effect mmu_orange]
frame_rate:   12
layers:       static 0 0 top (0.5,0.2,0)

[mmu_led_effect mmu_curtain]
define_on:    exit
layers:       comet -1.5 1.0 add (0.4,0.4,0.4),(0,0,1)
              comet  1.5 1.0 top (0.4,0.4,0.4),(1,0,0)

[mmu_led_effect mmu_sparkle]
define_on:    exit
layers:       twinkle 8 0.15 top (0.3,0.3,0.3), (0.4,0,0.25)

