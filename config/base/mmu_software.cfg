########################################################################################################################
# Happy Hare supporting macros
#  Miscellaneious setup and supporting macros
#
# THIS FILE IS READ ONLY
#

###########################################################################
# NECESSARY KLIPPER OVERRIDES
# These supplemental settings essentially disable klipper's built in
# extrusion limits and is necessary when using an MMU
#
[extruder]
max_extrude_only_distance: 200
max_extrude_cross_section: 50


###########################################################################
# Convenience print start marco that users can call directly from their
# slicer's custom "start g-code" or call from existing start marco
#
# To call from slicer, add this to custom start g-code (as one line just
# before the call to your regulat print start macro):
#    MMU_PRINT_START INITIAL_TOOL={initial_tool}
#                    REFERENCED_TOOLS=!referenced_tools!
#                    FIL_COLORS=!colors!
#                    FIL_TEMPS=!temperatures!
# 
[gcode_macro MMU_PRINT_START]
description: Called when starting print to setup MMU
gcode:
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}
    {% set referenced_tools = (params.REFERENCED_TOOLS|default("")|string).split(",") %}
    {% set filament_colors = (params.FIL_COLORS|default("")|string).split(",") %}
    {% set filamant_temps = (params.FIL_TEMPS|default("")|string).split(",") %}
    {% set ttg_map = printer.mmu.ttg_map %}

    # Precaution when printing from Octoprint
    {% if vars.octoprint_compat %}
        _MMU_PRINT_START
    {% endif %}

    {% if referenced_tools == "!referenced_tools!" %}
        RESPOND MSG="Happy Hare gcode pre-processor is diabled"
        {% set referenced_tools = initial_tool %}
    {% elif referenced_tools == "" %}
        RESPOND MSG="Single color print"
        {% set referenced_tools = initial_tool %}
    {% endif %}

    # Setup custom color map based on slicer color representation
    {% for _ in ttg_map %}					# Reset custom colors for all gates to black
        MMU_LED GATE={loop.index0} COLOR=black
    {% endfor %}
    {% if filament_colors == "!colors!" or filament_colors == "" %}
        RESPOND MSG="Filament color information not available"
    {% else %}
        {% for color in filament_colors %}
            {% set gate = ttg_map[loop.index0] %}		# Map to the correct gate in case of TTG map
            {% if loop.index0|string in referenced_tools %}
                MMU_LED GATE={gate} COLOR={color}		# Register the slicer filament color against the correct gate
            {% endif %}
        {% endfor %}
    {% endif %}

    # Setup filament temp map if passed by slicer
    {% if filament_temps == "!temperatures!" or filament_temps == "" %}
        RESPOND MSG="Filament temperature information not available"
    {% else %}
        {% for color in filament_colors %}
            {% set gate = ttg_map[loop.index0] %}		# Map to the correct gate in case of TTG map
            {% if loop.index0|string in referenced_tools %}
                MMU_LED GATE={gate} COLOR={color}		# Register the slicer filament color with gate
            {% endif %}
        {% endfor %}
    {% endif %}

    # PAUL?
    MMU_LED EXIT_EFFECT=custom_color QUIET=1			# Turn on the custom color effect on gate exit

    # PAUL: and not single color print
    {% if vars.check_gates %}
        MMU_CHECK_GATE TOOLS={referenced_tools}			# Verify all necessary tools are loaded
    {% endif %}

    # PAUL: and not bypass selected and not tool already loaded
    {% if vars.load_initial_tool %}
        MMU_CHANGE_TOOL STANDALONE=1 TOOL={initial_tool}	# Optional: load initial tool
    {% endif %}


###########################################################################
# Convenience print end marco that users can call directly from their
# slicer's custom "end g-code" or call from existing end marco
# 
# To call from slicer, add this to custom end g-code (as one line just
# after the call to your regular print end macro):
#    MMU_PRINT_END EJECT=1
#
[gcode_macro MMU_PRINT_END]
description: Called when ending print to finalize MMU
gcode:
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set eject = params.EJECT|default(vars.eject_tool)|int %}

    {% if eject %}
        MMU_EJECT
    {% endif %}

    {% if vars.reset_ttg %}
        MMU_TTG_MAP RESET=1
    {% endif %}

    {% if vars.dump_stats %}
        MMU_STATS TOTAL=1
    {% endif %}

    # Precaution when printing from Octoprint
    {% if vars.octoprint_compat %}
        _MMU_PRINT_END
    {% endif %}


###########################################################################
# Simplified subset of commands just for macro visability in
# Mainsail/Fluidd UI (until custom HH panel is complete!)
# The __ is a trick because it is not displayed by the UI but allows for
# similar names to the real commands defined by the klipper module
#
[gcode_macro MMU__EJECT]
gcode: MMU_EJECT

[gcode_macro MMU__HOME]
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    {% set force_unload = params.FORCE_UNLOAD|default(0)|int %}
    MMU_HOME TOOL={tool} FORCE_UNLOAD={force_unload}

[gcode_macro MMU__STATUS]
gcode: MMU_STATUS

[gcode_macro MMU__MOTORS_OFF]
gcode: MMU_MOTORS_OFF

[gcode_macro MMU__SERVO]
gcode:
    {% set pos = params.POS|default("up")|string %}
    MMU_SERVO POS={pos}

[gcode_macro MMU__SELECT_TOOL]
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    MMU_SELECT TOOL={tool}

[gcode_macro MMU__SELECT_BYPASS]
gcode: MMU_SELECT_BYPASS

[gcode_macro MMU__LOAD_BYPASS]
gcode: MMU_LOAD

[gcode_macro MMU__RECOVER]
gcode: MMU_RECOVER

[gcode_macro MMU__PRELOAD]
gcode:
    {% set gate = params.GATE|default(0)|int %}
    MMU_PRELOAD GATE={gate}

[gcode_macro MMU__CHECK_GATE]
gcode:
    {% set gate = params.GATE|default(-1)|int %}
    {% set tool = params.GATE|default(-1)|int %}
    {% set gates = params.GATE|default('!')|string %}
    {% set tools = params.GATE|default('!')|string %}
    MMU_CHECK_GATE GATE={gate} TOOL={tool} GATES={gates} TOOLS={tools}


###########################################################################
# Aliases (for backward compatibility) of previously well used commands...
#
[gcode_macro MMU_CHANGE_TOOL_STANDALONE]
description: Convenience macro for inclusion in print_start for initial tool load
gcode:
    MMU_CHANGE_TOOL {rawparams} STANDALONE=1

[gcode_macro MMU_CHECK_GATES]
description: Alias for updated macro name of MMU_CHECK_GATE
gcode:
    MMU_CHECK_GATE {rawparams}

[gcode_macro MMU_REMAP_TTG]
description: Alias for updated macro name of MMU_TTG_MAP
gcode:
    MMU_TTG_MAP {rawparams}

[gcode_macro MMU_FORM_TIP]
description: Alias for updated macro name of MMU_TEST_FORM_TIP
gcode:
    MMU_TEST_FORM_TIP {rawparams}

