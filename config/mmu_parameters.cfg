[mmu]
#
# The vendor and version config is important to define the capabiliies of the MMU
#
# ERCF
# 1.1 original design, add "s" suffix for Sprigy, "b" for Binky, "t" for Triple-Decky
#     e.g. "1.1sb" for v1.1 with Spriny mod and Binky encoder
# 2.0 new community edition ERCF
#
# Tradrack
#  - Comming soon
#
# Prusa
#  - Comming soon
#
mmu_vendor: ERCF			# MMU family
mmu_version: 1.1			# MMU hardware version number (add mod suffix documented above)
num_gate: {num_gates}				# Number of selector gates


# Servo configuration  -----------------------------------------------------------------------------------------------------
#
servo_up_angle: {servo_up_angle}			# Default: MG90S servo: Up=30    ; SAVOX SH0255MG: Up=140
servo_down_angle: {servo_down_angle}			# Default: MG90S servo: Down=140 ; SAVOX SH0255MG: Down=30


# Logging ------------------------------------------------------------------------------------------------------------------
#
# log_level & logfile_level can be set to one of (0 = essential, 1 = info, 2 = debug, 3 = trace, 4 = developer)
# Generally you can keep console logging to a minimal whilst still sending debug output to the mmu.log file
# Increasing the console log level is only really useful during initial setup to save having to constantly open the log file
log_level: 1
logfile_level: 3			# Can also be set to -1 to disable log file completely
log_statistics: 1 			# 1 to log statistics on every toolchange (default), 0 to disable (but still recorded)
log_visual: 2				# 1 log visual representation of filament, 2 compact form (default) , 0 disable
startup_status: 1			# Whether to log tool to gate status on startup, 1 = summary (default), 2 = full, 0 = disable


# Movement speeds ----------------------------------------------------------------------------------------------------------
#
# Long moves are faster than the small ones and used for the bulk of the bowden movement. Note that you can set two fast load
# speeds depending on whether MMU thinks it is pulling from the buffer or from the spool. It is often helpful to use a lower
# speed when pulling from the spool because more force is required to overcome friction and this prevents loosing steps.
# 100mm/s should be "quiet" with the NEMA14 motor or a NEMA17 pancake, but you can go lower for really low noise
# NOTE: Encoder cannot keep up much above 250mm/s so make sure `apply_bowden_correction` is off at very high speeds!
gear_from_buffer_speed: 160		# mm/s Conservative value is 100mm/s, Max around 350mm/s # PAUL was 160
gear_from_spool_speed: 60		# mm/s Use (lower) speed when loading from a gate for the first time (i.e. pulling from spool)
gear_short_move_speed: 60		# mm/s Conservative value is 35mm/s. Max around 100mm/s
gear_homing_speed: 50			# mm/s Speed of gear stepper only homing moves (e.g. extruder homing)

# Speeds of extruder movement. The 'sync' speeds will be used when gear and extruder steppers are moving in sync
extruder_load_speed: 20			# mm/s speed of load move inside extruder from homing position to meltzone
extruder_unload_speed: 25		# mm/s speed of unload moves inside of extruder (very initial move from meltzone is 50% of this)
extruder_sync_load_speed: 20		# mm/s speed of synchronized extruder load moves
extruder_sync_unload_speed: 25		# mm/s speed of synchronized extruder unload moves
extruder_homing_speed: 25		# mm/s speed of extruder only homing moves (e.g. to toolhead sensor)

# Selector movement speeds
selector_move_speed: 200        	# mm/s speed of selector movement (not touch)
selector_homing_speed: 60       	# mm/s speed of initial selector homing move (not touch)
selector_touch_speed: 80		# mm/s speed of all touch selector moves (if stallguard configured)


# Bowden tube loading -----------------------------------------------------------------------------------------------------
#
# In addition to different bowden loading speeds for buffer and non-buffered filament it is possible to detect missed steps
# caused by "jerking" on a heavy spool. If bowden correction is enabled the driver with "believe" the encoder reading and
# make correction moves to bring the filament to within the 'load_bowden_tolerance' of the end of bowden position
# (this does require a reliable encoder and is not recommended for very high speed loading >200mm/s)
apply_bowden_correction: 0		# 1 to enable, 0 disabled (default)
load_bowden_tolerance: 10.0		# How close in mm the correction moves will attempt to get to target


# Filament homing, loading and unloading controls -------------------------------------------------------------------------
#
# An MMU must have a known point at the end of the bowden from which it can precisely load the extruder. A toolhead sensor
# is past the extruder gear and the driver needs to know the max distance (from end of bowden move) to attempt homing.
toolhead_homing_max: 20			# Maximum distance to advance in order to attempt to home to toolhead sensor
#
# If not using a toolhead sensor (homing endpoint) the driver can "feel" for the extruder gear entry by colliding with it
# and thus needs to know how far to attempt homing. Because this method is not completely deterministic you might find
# the sweetspot for your setup by changing the step size (2 or 3mm usually best) and adjusting the TMC current reduction
# Also, touch (stallguard) sensing is possible to configure but doesn't work well with external EASY-BRD or ERB mcu's
extruder_homing_max: 50			# Maximum distance to advance in order to attempt to home the extruder
extruder_homing_step: 2.0		# Step size to use when homing to the extruder with collision detection
extruder_homing_endstop: collision	# Filament homing method/endstop name ("mmu selector touch" for stallguard) or "collision"


# Final filament loading distances ----------------------------------------------------------------------------------------
#
# This is the distance of the final filament load from the homing point to the nozzle
# If homing to toolhead sensor this will be the distance from the toolhead sensor to the nozzle
# If extruder homing it will be the distance from the extruder gears (end of bowden) to the nozzle
#
# This value can be determined by manually inserting filament to your homing point (extruder gears or toolhead sensor)
# and advancing it 1-2mm at a time until it starts to extrude from the nozzle.  Subtract 1-2mm from that distance distance
# to get this value.  If you have large gaps in your purge tower, increase this value.  If you have blobs, reduce this value.
# This value will depend on your extruder, hotend and nozzle setup.
home_position_to_nozzle: 72		# E.g. Revo Voron with CW2 extruder using extruder homing (62 with toolhead sensor)
#
# Advanced and optional. If you want to be able to switch between sensorless and toolhead sensor or you want to optimize
# extruder unload when using toolhead sensor you can override 'home_position_to_nozzle' with these more specific values
# (Note that the difference between these two represents the extruder to sensor distance and is used as the final
# unload distance from extruder. An accurate setting can reduce tip noise/grinding on exit from extruder)
extruder_to_nozzle: 72			# E.g. Revo Voron with CW2 extruder using extruder homing
sensor_to_nozzle: 62			# E.g. Revo Voron with CW2 extruder using toolhead sensor homing
#
# Whether the detection of successful extruder load is considered an error or warning. Some designs of extruder have a short
# final move distance that may not be picked up by encoder and cause false errors. This allows masking of those errors
ignore_extruder_load_error: 0


# Synchronized gear/extruder movement -------------------------------------------------------------------------------------
# If enabled for loading or unloading extruder this will override 'sync_load_length' and 'sync_unload_length'
# If you normally run with maxed out gear stepper current consider reducing it with `sync_gear_current`
sync_load_extruder: 1			# Extruder loading leverages motor synchronization
sync_unload_extruder: 0			# Extruder unloading (except stand alone tip forming) leverages motor synchronization
sync_form_tip: 0			# Standalone tip formation (initial part of unload) also leverages motor sychronization
sync_to_extruder: 0			# Gear motor is synchronized to extruder during print


# TMC Current control -----------------------------------------------------------------------------------------------------
# If equipped with TMC drivers the current of the gear and extruder motors can be controlled to optimize performance.
# This can be useful to control gear stepper temperature when printing with synchronized motor, to ensure no skipping during
# fast tip-forming moves or to reduce current and prevent griding for collision detection when not using toolhead sensor
sync_gear_current: 50			# % of gear_stepper current (10%-100%) to use when syncing with extruder during print
extruder_form_tip_current: 120		# % of extruder current (100%-150%) to use when forming tip (100 to disable)
extruder_homing_current: 40		# % gear_stepper current (10%-100%) to use when homing to extruder homing (100 to disable)


# Clog detection and Endless Spool ---------------------------------------------------------------------------------------
# Selector (stallguard) operation. If configured for sensorless homing MMU can detect blocked filament path and try to recover
# automatically but it is slower and more difficult to set up (sensorless still requires the physical endstop switch)
# This is setup by defining stallguard homing on the selector_stepper and setting the physical endstop pin in mmu_hardware.cfg
#
enable_clog_detection: 2	# 0 = disable, 1 = static length clog detection, 2 = automatic length clog detection
enable_endless_spool: 1		# 0 = disable endless spool,  1 = enable endless spool (requires clog detection)


# Turn on behavior -------------------------------------------------------------------------------------------------------
# MMU can auto-initialize based on previous persisted state. There are 5 levels with each level bringing in
# additional state information requiring progressively less inital setup. The higher level assume that you don't touch
# MMU while it is offline and it can come back to life exactly where it left off!  If you do touch it or get confused
# then issue an appropriate reset command (E.g. MMU_RESET) to get state back to the defaults.
# Enabling `startup_status` is recommended if you use persisted state at level 2 and above
# Levels: 0 = start fresh every time except calibration data (the former default behavior)
#         1 = restore persisted endless spool groups
#         2 = additionally restore persisted tool-to-gate mapping
#         3 = additionally restore persisted gate status (filament availability, material and color) (default)
#         4 = additionally restore persisted tool, gate and filament position! (Recommended when MMU is working well)
#
persistence_level: 3


# Misc configurable, but fairly fixed values -----------------------------------------------------------------------------
#
num_moves: 1			# Number of separate fast moves to make when loading or unloading bowden (>1 if you have TTC errors)
extruder: extruder		# Name of the toolhead extruder that MMU is using
timeout_pause: 72000		# Time out in seconds used by the MMU_PAUSE
disable_heater: 600		# Delay in seconds after which the hotend heater is disabled in the MMU_PAUSE state
min_temp_extruder: 200		# Used to ensure we can move the extruder and form tips
unload_buffer: 40		# Amount to reduce the fast unload so that accurate encoder unload has room to operate
load_encoder_retries: 2		# Number of times MMU will attempt to grab the filament on initial load (max 5)
parking_distance: 23.0		# Controls how close to the gate washer the filament is parked (distance from encoder, range=12-30)
delay_servo_release: 2.0	# Delay release on servo by (mm) when not using synchronous load
servo_duration: 0.2		# Duration of PWM burst sent to servo (automatically turns off)
transition_length: 10		# mm of special handling for entry and exit of extruder. 0 to disable
enable_selector_touch: 0	# If selector touch operation is possible this can be used to disable it 1=enabled, 0=disabled
z_hop_height: 5			# Height in mm of z_hop move on pause or runout to avoid blob on print
z_hop_speed: 15			# mm/s Speed of z_hop move


# Advanced: re-initialize behavior  --------------------------------------------------------------------------------------
#
# Happy Hare has advanced features like:
# 1. Managing a tool to gate mapping so you can remap incorrectly spools or map all tools to one gate for mono color prints!
# 2. Remembering the state of (presence) of filament in each gate
# 3. The filament material loaded in each gate
# 4. The filament color in each gate
# 5. Grouping gates (spools) into Endless Spool groups
#
# Typically these will be set dynamically over time and automatically saved to 'mmu_vars.cfg'.  When you power up your MMU
# these values are loaded. However, if you explicity reset your MMU state through one of the many reset commands, these values
# will be restored to a default. The system default values are typically empty or in the case of TTG map, 1:1 mapping of
# Tx to Gate #x, or no Endless Spool groups.  However you have the option to define starting values here.
# IMPORTANT: the arrays of values must be the same length as the number of gates on your MMU otherwise they will be rejected.
#
# This group of settings collectively form the default gate map which can be updated with the `MMU_SET_GATE_MAP` command
# or similar commands that determine gate status. They must all be the same length at the number of gates (0 .. n)
# Note that these are the defaults and will be overriden by saved values in mmu_vars.cfg
#
# 1. The default mapping for tool to gate.  If not specified or commented out the mapping will default to Tx = Gate #x
#    'MMU_RESET_TTG_MAP' will revert to these default values. 'MMU_REMAP_TTG' will modify and persist during use.
#tool_to_gate_map: 0, 1, 2, 3, 4, 5, 6, 7, 8
#
# 2. Whether gate has filament available (2=available from buffer, 1=available from spool, 0=empty). If not specified or commentet
#    out the system default of all gates in an unknown state will be assumed
#    'MMU_SET_GATE_MAP' is used to adjust and persist during use
#gate_status: 1, 1, 1, 1, 1, 1, 1, 1, 1
#
# 3. Similarly this specifies the material type present in the gate. If not specified or commented out the name will be empty
#    'MMU_SET_GATE_MAP' is used to adjust and persist during use
#gate_material: PLA, ABS+, ABS, ABS, PLA, PLA, PETG, ABS, ABS
#
# 4. Similarly this specifies the color of the filament in each gate. If not specified or commented out the color will be default
#    Color can be w3c color name or RRGGBB (no leading #)
#    'MMU_SET_GATE_MAP' is used to adjust and persist during use
#gate_color: red, orange, yellow, green, blue, indigo, violet, ffffff, black
#
# 5. If endless spool is turned on, you should define a list of EndlessSpool groups here, one entry for each gate in your MMU
#    when filament runs out on a gate, it will switch to the next gate with the same group number
#    for example, if set to 1, 2, 3, 1, 2, 3, 1, 2, 3 on a 9 cart MMU, and a runout occurs on gate #0
#    the MMU will switch to using gate #3 and then gate #6 automatically remapping the tool as it goes.
#    Note that this will be overriden by a saved value in mmu_vars.cfg if modified with 'MMU_ENDLESS_SPOOL_GROUPS' command
#endless_spool_groups: 1, 2, 3, 1, 2, 3, 1, 2, 3
#
# For completeness and primarily for historical reasons rather than usefulness, the default position of each gate on the selector
# and the optional bypass position can be specified. These would only ever be used if 'mmu_vars.cfg' was deleted
#selector_offsets: 3.2, 24.2, 45.2, 71.3, 92.3, 113.3, 141.6, 162.6, 183.6
#bypass_selector: 123.4			# Set to your measured position, 0 to disable

