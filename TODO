Installer:
10. Check comments on tool_tip_macro.
Example:
variable_cooling_tube_position should have the comment: Measured from Nozzle to Top of Heater Block
variable_cooling_tube_length should have the comment: Measured from Top of Heater Block to Top of Heatsink

11. Don't trigger 'gate_empty' before double checking if it is really empty?

13. Here are the parameters that would go in install.sh (using "MELLOW_FLY_ERCF" instead of ERB / EASY-BRD  /  etc)
 If it helps to improve HH (and HH2), here's the hardware config for the Mellow FLY ERCF board (supports canbus)  Of note is that the mcu config for this board might be something similar to  canbus_uuid: nnnnnnnnnnn instead of serial: xxx.  (The board can be used in either USB or canbus mode)

PIN[MELLOW_FLY_ERCF,gear_uart_pin]="ercf:gpio9";
PIN[MELLOW_FLY_ERCF,gear_step_pin]="ercf:gpio7";
PIN[MELLOW_FLY_ERCF,gear_dir_pin]="!ercf:gpio8"; 
PIN[MELLOW_FLY_ERCF,gear_enable_pin]="!ercf:gpio6";
PIN[MELLOW_FLY_ERCF,gear_diag_pin]="ercf:gpio23";
PIN[MELLOW_FLY_ERCF,gear_endstop_pin]="ercf:gpio13"; // this is a dummy unused pin because there's no actual endstop pin
PIN[MELLOW_FLY_ERCF,selector_uart_pin]="ercf:gpio0";
PIN[MELLOW_FLY_ERCF,selector_step_pin]="ercf:gpio2";
PIN[MELLOW_FLY_ERCF,selector_dir_pin]="!ercf:gpio1";
PIN[MELLOW_FLY_ERCF,selector_enable_pin]="!ercf:gpio3";
PIN[MELLOW_FLY_ERCF,selector_diag_pin]="^ercf:gpio22";
PIN[MELLOW_FLY_ERCF,selector_endstop_pin]="ercf:gpio20";
PIN[MELLOW_FLY_ERCF,servo_pin]="ercf:gpio21";
PIN[MELLOW_FLY_ERCF,encoder_pin]="ercf:gpio15";

24. gneu feedback on EndlessSpool: (2 ideas and 1 possible bug)
I came across a mistake of mine, that makes me think about a few mods that could improve ES.
Yesterday I was printing something and in the middle of the print I saw that ES was required.
I stated the print with T9. When I noticed that I didn't had enough material to finish the print, I started to set up ES while printing.
I installed a new spool on T2 and modified TTG map so that T2 will be the next ES spool for T9. However I forgot to make T2 available. I could not check the gate because T9 was printing. When the ES was detected, of course he told me that T2 was empty and went to pause. I didn't all that was needed to make T2 working, and finish the print.
> The first mod could be that when you add a tool in the ES mapping, that tool (T2 in my case) is automatically made available.
On the next print, T9 and T2 were still mapped together for ES, so I thought that since it had detected ES on T9 it would start on T2. But he didn't. So I had to pause and load T2 manually.
> The next mod could be that when ES is detected on a gate, that gate is declared empty automatically.
> When the spool detected as empty, the unload could go a bit further than park the filament in the block. It could unload 20mm further to make sure that the gate is empty.
What do you think ? 
moggieuk â€” Today at 7:04 PM
> The first mod could be that when you add a tool in the ES mapping, that tool (T2 in my case) is automatically made available.
I agree that would be sensible thing to do automatically.  Just so you know you can manually set it to "available" with the MMU_GATE_MAP GATE=xx AVAILABLE=1 command, but it should be automatic.
> The next mod could be that when ES is detected on a gate, that gate is declared empty automatically.
This is what it is suppose to do and was sure it did.  Did you do something that could have caused it to be marked available again?  Or maybe the tool-to-gate map started with the wrong gate.  I'll have to look into this one but sounds like a bug.
> When the spool detected as empty, the unload could go a bit further than park the filament in the block. It could unload 20mm further to make sure that the gate is empty.
Can you explain this more? Do you mean the unload of the filament that has run out could go further? If so, then yes, this is a good idea!

25. Need to use ES groups for initial load if desired gate is empty!
I forced T9 empty, hopping that T2 will load and start the print. 
It didn't. It just stop the print. Although T2 and T9 are mapped together for ES.

26. Gate calibration - maybe throw away the first measure unless the gate is buffered for more accurate results

27. Make servo movement integration faster with option to pass printtime() to servo move so time is not currenttime to avoid toolhead.wait()

Complete Type A MMU support
===========================
1. Update servo methods to leverage the current gate (or pass it in?). If None, then use default (single servo)
2. Make gate and extruder sensor homing also automatically go backward to home 
3. Make extruder homing optional ... could blindly load bowden then home to nozzle!
4. Add home to nozzle option .. either a hard distance or endstop

IDEA: Parhaps all filament moves could be:
a) blind movement (optionally encoder verified)
b) home to sensor (some virtual sensors like collision)

5. Ensure servo move is part of filament move step (I think it is)
6. Put all selector movement into new Class called "mmm_selector.py"? or mmu_toolhead.py?
7. Put all filament drive movement into new Class called "mmu_filament_driver.py" or mmu_toolhead.py?

8. Add pre-gate sensor support .. essentially a runout sensor with insertion logic to auto load (during print only if Type B or C.
9. Use pre-gate sensor to detect filament for MMU_GATE_MAP - insertion logic could at least do that.
Type A:
- pre-gate logic would update gate map, call action changed?
- MMU_PRELOAD if possible

10. Turn spool group into Class... that fetches filament from first gate in group, but tacks that it has move to new gate. On print end, reset the TTG map back to what is what at start of print.  start print should snapshot, endless_spool update in print, end print should restore.  What about manual changes to TTG during a print? these really shouldn't be restore/overwitten at end of print.

11. Add additional sensors to visual string maybe need additional filament pos states to handle pre-gate?

Type B & C  MMU support
=======================
1. Add multiple gear stepper support
2. Add optional per gear servo with config movement
3. Each gear stepper needs it's own rotation distance
3a. Smart convert of gear ratios to rotation distance... update to work with rotation distance instead of ratio?
4. Need per gear stepper servos.
4a. mmu_servo should "inherit" base servo settings so it could be as easy and just specifying `pin` or least only the differences.
5. Could multiple gear steppers also inhert settings from the base...?


12. Inattention watchdog that autmatically executes recovery if user doesn't react -- better than disabling heaters and killing print.

